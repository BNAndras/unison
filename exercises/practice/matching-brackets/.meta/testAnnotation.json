[
  {
    "test_code": "matchingBrackets.test.ex1 = let\n\ttest.label \"paired square brackets\" <| test.expect (isPaired \"[]\" === true)",
    "name": "matchingBrackets.test.ex1"
  },
  {
    "test_code": "matchingBrackets.test.ex2 = let\n\ttest.label \"empty string\" <| test.expect (isPaired \"\" === true)",
    "name": "matchingBrackets.test.ex2"
  },
  {
    "test_code": "matchingBrackets.test.ex3 = let\n\ttest.label \"unpaired brackets\" <| test.expect (isPaired \"[[\" === false)",
    "name": "matchingBrackets.test.ex3"
  },
  {
    "test_code": "matchingBrackets.test.ex4 = let\n\ttest.label \"wrong ordered brackets\" <| test.expect (isPaired \"}{\" === false)",
    "name": "matchingBrackets.test.ex4"
  },
  {
    "test_code": "matchingBrackets.test.ex5 = let\n\ttest.label \"wrong closing bracket\" <| test.expect (isPaired \"{]\" === false)",
    "name": "matchingBrackets.test.ex5"
  },
  {
    "test_code": "matchingBrackets.test.ex6 = let\n\ttest.label \"paired with whitespace\" <| test.expect (isPaired \"{ }\" === true)",
    "name": "matchingBrackets.test.ex6"
  },
  {
    "test_code": "matchingBrackets.test.ex7 = let\n\ttest.label \"partially paired brackets\" <| test.expect (isPaired \"{[])\" === false)",
    "name": "matchingBrackets.test.ex7"
  },
  {
    "test_code": "matchingBrackets.test.ex8 = let\n\ttest.label \"simple nested brackets\" <| test.expect (isPaired \"{[]}\" === true)",
    "name": "matchingBrackets.test.ex8"
  },
  {
    "test_code": "matchingBrackets.test.ex9 = let\n\ttest.label \"several paired brackets\" <| test.expect (isPaired \"{}[]\" === true)",
    "name": "matchingBrackets.test.ex9"
  },
  {
    "test_code": "matchingBrackets.test.ex10 = let\n\ttest.label \"paired and nested brackets\" <| test.expect (isPaired \"([{}({}[])])\" === true)",
    "name": "matchingBrackets.test.ex10"
  },
  {
    "test_code": "matchingBrackets.test.ex11 = let\n\ttest.label \"unopened closing brackets\" <| test.expect (isPaired \"{[)][]}\" === false)",
    "name": "matchingBrackets.test.ex11"
  },
  {
    "test_code": "matchingBrackets.test.ex12 = let\n\ttest.label \"unpaired and nested brackets\" <| test.expect (isPaired \"([{])\" === false)",
    "name": "matchingBrackets.test.ex12"
  },
  {
    "test_code": "matchingBrackets.test.ex13 = let\n\ttest.label \"paired and wrong nested brackets\" <| test.expect (isPaired \"[({]})\" === false)",
    "name": "matchingBrackets.test.ex13"
  },
  {
    "test_code": "matchingBrackets.test.ex14 = let\n\ttest.label \"paired and incomplete brackets\" <| test.expect (isPaired \"{}[\" === false)",
    "name": "matchingBrackets.test.ex14"
  },
  {
    "test_code": "matchingBrackets.test.ex15 = let\n\ttest.label \"too many closing brackets\" <| test.expect (isPaired \"[]]\" === false)",
    "name": "matchingBrackets.test.ex15"
  },
  {
    "test_code": "matchingBrackets.test.ex16 = let\n\ttest.label \"early unexpected brackets\" <| test.expect (isPaired \")()\" === false)",
    "name": "matchingBrackets.test.ex16"
  },
  {
    "test_code": "matchingBrackets.test.ex17 = let\n\ttest.label \"early mismatched brackets\" <| test.expect (isPaired \"{)()\" === false)",
    "name": "matchingBrackets.test.ex17"
  },
  {
    "test_code": "matchingBrackets.test.ex18 = let\n\ttest.label \"math expression\" <| test.expect (isPaired \"(((185 + 223.85) * 15) - 543)/2\" === true)",
    "name": "matchingBrackets.test.ex18"
  },
  {
    "test_code": "matchingBrackets.test.ex19 = let\n\ttest.label \"complex latex expression\" <| test.expect (isPaired \"\\\\left(\\\\begin{array}{cc} \\\\frac{1}{3} & x\\\\\\\\ \\\\mathrm{e}^{x} &... x^2 \\\\end{array}\\\\right)\" === true)",
    "name": "matchingBrackets.test.ex19"
  }
]
